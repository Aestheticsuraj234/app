generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM_USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isAdmin               Boolean                @default(false)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  subscribedTo          Subscription? // Optional: Reference to subscription details
  contents              Content[]
  problemMarked         ProblemMarked[]
  problemSolved         ProblemSolved[]
  systemDesignMarked    SystemDesignMarked[]
  systemDesignSolved    SystemDesignSolved[]
  notes                 Note[]

  blogLikedBy   BlogLikedBy[]
  blogSavedBy   BlogSavedBy[]
  blogVisitedBy BlogVisitedBy[]
  blogComments  BlogComment[]

  subTopicLikedBy   SubTopicLikedBy[]
  subTopicSavedBy   SubTopicSavedBy[]
  subTopicUnlikedBy SubTopicUnlikedBy[]
  markAsDone        MarkAsDone[]
  TopicAssignMent   UserTopicAssignment[]
  point             Point[]

  doubts       Doubt[]
  doubtReplies DoubtReply[]
  doubtLikes   DoubtLike[]
  doubtUnlikes DoubtUnlike[]

  isdayAssigned isdayAssignedByCurrentUser[]

  community Community[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Subscription {
  id        String             @id @default(cuid()) @map("_id")
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      PLAN // Example: "BASIC", "PREMIUM", etc.
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now())
  endDate   DateTime? // Optional: Subscription expiration date

  @@unique([userId])
}

enum PLAN {
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum ContentType {
  DSA
  BLOGS
  SYSTEM_DESIGN
  CS_SUBJECT
  WORKSHOPS
  NOTES
  EBOOKS
}

enum ContentStatus {
  UNPUBLISHED
  PUBLISHED
  ARCHIVED
}

enum BlogType {
  EXISTING
  NEW
}

model Content {
  id           String                @id @default(cuid()) @map("_id")
  title        String
  description  String
  image        String
  type         ContentType
  status       ContentStatus         @default(UNPUBLISHED)
  dsa          Dsa[]
  systemDesign SystemDesignChapter[]
  workshop     workshop[]
  blog         blog[]
  author       User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model blog {
  id          String          @id @default(cuid()) @map("_id")
  content     Content         @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId   String
  title       String
  slug        String?         @unique
  description String
  readTime    String?
  thumbnail   String
  blogContent String?
  blogType    BlogType
  blogUrl     String?
  likedBy     BlogLikedBy[]
  savedBy     BlogSavedBy[]
  visitedBy   BlogVisitedBy[]
  commentedBy BlogComment[]
  status      ContentStatus   @default(UNPUBLISHED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model BlogComment {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  blogId    String
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogLikedBy {
  id     String @id @default(cuid()) @map("_id")
  userId String
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog   blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model BlogSavedBy {
  id     String @id @default(cuid()) @map("_id")
  userId String
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog   blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model BlogVisitedBy {
  id     String @id @default(cuid()) @map("_id")
  userId String
  blogId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog   blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model workshop {
  id             String        @id @default(cuid()) @map("_id")
  content        Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId      String
  title          String
  description    String
  image          String
  startDate      DateTime
  endDate        DateTime
  techStack      String[]
  sourceCodeLink String?
  status         ContentStatus @default(UNPUBLISHED)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model SystemDesignChapter {
  id            String                @id @default(cuid()) @map("_id")
  content       Content               @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId     String
  chapterNumber Int
  title         String
  description   String
  problems      SystemDesignProblem[]
  status        ContentStatus         @default(UNPUBLISHED)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model SystemDesignProblem {
  id           String               @id @default(cuid()) @map("_id")
  chapter      SystemDesignChapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId    String
  problemTitle String
  articleLink  String
  youtubeLink  String
  solvedBy     SystemDesignSolved[]
  markedBy     SystemDesignMarked[]
  status       ContentStatus        @default(UNPUBLISHED)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model Problem {
  id              String          @id @default(cuid()) @map("_id")
  dsaChapter      DsaChapter      @relation(fields: [dsaChapterId], references: [id], onDelete: Cascade)
  dsaChapterId    String
  isSolved        Boolean?        @default(false)
  solvedBy        ProblemSolved[]
  markedForRevise Boolean         @default(false)
  markedBy        ProblemMarked[]
  problemTitle    String
  articleLink     String
  youtubeLink     String
  problemLink     String
  difficultyLevel DifficultyLevel
  status          ContentStatus   @default(UNPUBLISHED)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ProblemMarked {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model ProblemSolved {
  id        String  @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model SystemDesignMarked {
  id        String              @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   SystemDesignProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model SystemDesignSolved {
  id        String              @id @default(cuid()) @map("_id")
  userId    String
  problemId String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   SystemDesignProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Dsa {
  id        String        @id @default(cuid()) @map("_id")
  content   Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
  dsaTitle  String
  dsaSteps  DsaStep[]
  status    ContentStatus @default(UNPUBLISHED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model DsaStep {
  id          String        @id @default(cuid()) @map("_id")
  dsa         Dsa           @relation(fields: [dsaId], references: [id])
  dsaId       String
  stepNumber  Int
  stepTitle   String
  dsaChapters DsaChapter[]
  status      ContentStatus @default(UNPUBLISHED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DsaChapter {
  id                 String        @id @default(cuid()) @map("_id")
  dsaStep            DsaStep       @relation(fields: [dsaStepId], references: [id], onDelete: Cascade)
  dsaStepId          String
  chapterNumber      Int
  chapterTitle       String
  chapterDescription String
  status             ContentStatus @default(UNPUBLISHED)
  problems           Problem[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

// Tutorial: https://www.youtube.com/watch?v=0bOJ9YUe9Jg

enum TechnologyStatus {
  UNPUBLISHED
  PUBLISHED
  ARCHIVED
}

model Technology {
  id            String                       @id @default(cuid()) @map("_id")
  name          String
  description   String
  image         String
  isDayAssigned isdayAssignedByCurrentUser[]
  status        TechnologyStatus             @default(UNPUBLISHED)
  topics        Topic[]
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
}

model isdayAssignedByCurrentUser {
  id            String     @id @default(cuid()) @map("_id")
  userId        String
  isDayAssigned Boolean
  startDate     DateTime
  technologyId  String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  technology    Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@unique([userId, technologyId])
}

enum CompletionStatus {
  DONE
  MISSED
  PENDING
}

model Topic {
  id           String                @id @default(cuid()) @map("_id")
  title        String
  dayAssigned  UserTopicAssignment[]
  technology   Technology            @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String
  status       TechnologyStatus      @default(UNPUBLISHED)
  subTopics    SubTopic[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model SubTopic {
  id               String              @id @default(cuid()) @map("_id")
  title            String
  videoLink        String?
  videoDescription String?
  content          String?
  notes            Note[]
  markAsDone       MarkAsDone[]
  likedBy          SubTopicLikedBy[]
  savedBy          SubTopicSavedBy[]
  unlikeBy         SubTopicUnlikedBy[]
  doubts           Doubt[]
  point            Point[]
  topic            Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId          String
  status           TechnologyStatus    @default(UNPUBLISHED)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model Point {
  id         String   @id @default(cuid()) @map("_id")
  subTopicId String
  userId     String
  point      Int
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, subTopicId])
}

model Doubt {
  id         String        @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  content    String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic      @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  replies    DoubtReply[]
  likes      DoubtLike[]
  unlikes    DoubtUnlike[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([userId, subTopicId])
}

model DoubtReply {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  doubtId   String
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doubt     Doubt    @relation(fields: [doubtId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, doubtId])
}

model DoubtLike {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  doubtId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doubt     Doubt    @relation(fields: [doubtId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, doubtId])
}

model DoubtUnlike {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  doubtId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doubt     Doubt    @relation(fields: [doubtId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, doubtId])
}

model Note {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  note       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MarkAsDone {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subTopicId])
}

model SubTopicLikedBy {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subTopicId])
}

model SubTopicSavedBy {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subTopicId])
}

model SubTopicUnlikedBy {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  subTopicId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id], onDelete: Cascade)

  @@unique([userId, subTopicId])
}

model UserTopicAssignment {
  id                String           @id @default(cuid()) @map("_id")
  userId            String
  TopicId           String
  dayAssigned       Int?
  complettionStatus CompletionStatus @default(PENDING)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic             Topic            @relation(fields: [TopicId], references: [id], onDelete: Cascade)

  @@unique([userId, TopicId])
}

model Community {
  id         String @id @default(cuid()) @map("_id")
  name       String
  imageUrl   String
  inviteCode String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id          String     @id @default(cuid()) @map("_id")
  userId      String
  communityId String
  role        MemberRole @default(GUEST)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
  @@index([communityId])
}

enum ChannelType {
  TEXT
}

model Channel {
  id   String      @id @default(cuid()) @map("_id")
  name String
  type ChannelType @default(TEXT)

  userId      String
  communityId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([communityId])
}
